MariaDB Server 11.4.5
location C:\250213db\
use UTF8 Character Set 체크
password test1234
service_name MariaDB 250213
TCP_Port 33067

실행 - services.msc
서비스이름에서 maria 250213 찾기 - 상태:실행중 & 실행유형:자동 확인하기

실행 - cmd
cd \
cd 250213db\bin
mysql.exe -u root -p
Enter password: test1234
출력결과: MariaDB [(none)] 이면 정상.

------------------------------------------------------------------------------------------------------------------------
## 스키마 ##
- 스키마(Schema)는 서로 관련있는 테이블들을 묶어내기 위해 사용한다. 주로 하나의 서비스에 유관한 테이블을 묶어내기 위해 사용한다.
- SCHEMA 라는 키워드는 데이타베이스(DATABASE)라는 키워드와 치환하여 사용할 수 있다.
- 실질적인 데이타를 직접 가지지 않는 단순한 껍데기이다.
- 명명법: 스네이크 케이스, 단수형 혹은 복수형
            *카멜케이스: smartPhone
            *파스칼케이스: SmartPhone (XMLHttpRequest)
            *케밥케이스: smart-phone
            *스네이크케이스: smart_phone
            *대문자스네이크케이스: SMART_PHONE (XMLHttpRequest.DONE)

[ 생성하기 ]
- 스키마를 생성하기 위해 아래 쿼리를 실행한다.
    CREATE SCHEMA `이름`;
    + 이미 사용 중인 이름을 사용할 수 없음에 유의한다.

[ 조회하기 ]
- 존재하는 스키마의 목록을 조회하기 위해 아래 쿼리를 실행한다.
    SHOW SCHEMAS;

[ 수정하기 ]
- 스키마의 이름을 변경하는 것은 불가능하다.

[ 삭제하기 ]
- 존재하는 스키마를 삭제하기 위해 아래 쿼리를 실행한다.
    DROP SCHEMA `이름`;
    + 존재하지 않는 스키마를 삭제할 수 없음에 유의한다.
    + 스키마를 삭제하면 이가 가지고 있는 테이블 및 테이블의 레코드가 모두 삭제되고 돌릴 수 없음으로 유의한다.

## 테이블 ##
- 테이블(Table)은 실제 데이타(레코드)를 담기 위해 존재한다.
- 테이블은 반드시 스키마에 속해있어야 한다.
- 명명법: 스네이크 케이스, 복수형

[ 생성하기 ]
- 테이블을 생성하기 위해 아래 쿼리를 실행한다.
    CREATE TABLE `스키마 이름.테이블 이름`;
    (
        [열 구조,...]
    );

[ 조회하기 ]
- 특정스키마에 소속되어잇는 테이블의 목록을 조회하기 위해 아래 쿼리를 실행한다.
    SHOW TABLES IN '소속 스키마 이름';
- 특정 테이블이 가지고 있는 열의 구조를 조회하기 위해 아래 쿼리를 실행한다.
    DESC `스키마이름`.`테이블이름`;
    DESCRIBE `스키마이름`.`테이블이름`;

[ 수정하기 ]
++ 이름 및 소속 스키마 변경하기 ++
- 테이블의 이름을 변경하거나, 소속된 스키마를 변경하고자 할 때 아래 쿼리를 실행한다.
    ALTER TABLE `기존 스키마 이름`.`기존 테이블 이름` RENAME `새로운 스키마 이름`.`새로운 테이블 이름`
    + 소속 스키마 변경 없이 테이블 이름만 변경하고자 한다면, 기존 스키마 이름과 새로운 스키마 이름을 동일하게 유지하면 된다.
    + 테이블 이름 변경 없이 소속 스키마만 변경하고자 한다면, 기존 테이블 이름과 새로운 테이블 이름을 동일하게 유지하면 된다.

++ 열 추가하기 ++
- 존재하는 테이블에 열을 추가하기 위해 아래 쿼리를 실행한다.
    ALTER TABLE `스키마 이름`.`테이블 이름` ADD COLUMN [열 구조];
    + 별도의 명시가 없다면 추가되는 열은 열들 중에 테이블의 가장 마지막 자리에 추가된다.
    + 추가하려는 열을 특정 열 뒤에 추가하려면, 아래와 같이 AFTER 키워드로 활용할 수 있다.
    ALTER TABLE `스키마 이름`.`테이블 이름` ADD COLUMN [열 구조] AFTER `대상 열 이름`;
    + 별도의 BEFORE 키워드는 없음에 유의하고, 가장 앞자리에 열을 추가하기 위해서는 아래와 같이 FIRST 키워드를 활용할 수 있다.
    ALTER TABLE `스키마 이름`.`테이블 이름` ADD COLUMN [열 구조] FIRST;

++ 열 이름 변경하기 ++
- 테이블이 가지고 있는 열의 이름을 변경하기 위해 아래 쿼리를 실행한다.
    ALTER TABLE `스키마 이름`.`테이블 이름` RENAME COLUMN `기존 열 이름` TO `새로운 열 이름`;

++ 열 구조 수정하기 ++
- 테이블이 가지고 있는 열의 구조를 수정하기 위해 아래 쿼리를 실행한다.
    ALTER TABLE `스키마 이름`.`테이블 이름` MODIFY COLUMN [열 구조];
    + 작성하는 열 구조가 포함하는 열의 이름은 존재하는 상태여야 한다.
    + 열 구조 수정과 동시에 AFTER 혹은 FIRST 키워드를 사용하여 위치 또한 옮길 수 있다.
      단, 위치만 옮긴다 하더라도 기존의 열 구조를 똑같이 작성해야함에 유의한다.

++ 열 삭제하기 ++
- 테이블이 가지고 있는 열을 삭제하기 위해 아래 쿼리를 실행한다.
    ALTER TABLE `스키마 이름`.`테이블 이름` DROP COLUMN `열 이름`;
    + 삭제하는 열에 해당하는 모든 레코드들의 데이터가 삭제되고 되돌릴 수 없음으로 유의한다.

[ 삭제하기 ]
- 존재하는 테이블을 삭제하기 위해 아래 쿼리를 실행한다.
    DROP TABLE `스키마 이름`.`테이블 이름`;
    + 존재하지 않는 테이블을 삭제할 수 없음에 유의한다.
    + 테이블을 삭제하면 이가 가지고 있는 레코드가 모두 삭제되고 되돌릴 수 없음으로 유의한다.

## 열 ##
- 열(Column)은 테이블에 존재하는 레코드가 가지는 데이타의 타입을 정하기 위해 사용한다.
- 명명법: 스케이크 케이스, 단수형 혹은 복수형
- 열구조는 아래와 같다.
    `이름` [데이타 타입] [NULL|NOT NULL]? [DEFAULT X]? [AUTO_INCREMENT]
    + NULL: 해당 열의 값이 비어있을 수 있다는 의미이다. NULL 혹은 NOT NULL 을 명시하지 않을 경우 기본 값이다.
    + NOT NULL: 해당 열의 값이 비어있을 수 없다는 의미이다.
    + DEFAULT x: 레코드 삽입(INSERT)시 해당 열의 값을 명시하지 않을 경우 사용할 기본 값을 x 로 설정한다. 생략시 x 는 NULL 이다.
    + AUTO_INCREMENT: 해당 열의 데이타 타입이 숫자이고, 기본 키(Primary Key)일 때, 레코드 삽입 시 해당 열의 값을 명시하지 않을 경우 해당 열의 마지막으로 사용된 값(없다면 1)에 1을 더한 값을 사용하도록 한다.

## 데이타 타입 ##
- 모든 정수형과 DECIMAL 을 제외한 실수형 타입 뒤에 UNSIGNED 키워드를 붙여 음수부 크기 만큼 양수를 추가적으로 사용할 수 있다.
  가령, TINYINT UNSIGNED 타입의 범위는 0 부터 255 까지이다.

[ 정수형 ]
- TINYINT: (1 Bytes) -128 부터 127 까지의 정수
- SMALLINT: (2 Bytes) -32,768 부터 32,767 까지의 정수
- MEDIUMINT: (3 Bytes) -8,388,608 부터 8,388,607 까지의 정수
- INT: (4 Bytes) -2,147,483,648 부터 2,147,483,647 까지의 정수
- BIGINT: (8 Bytes) -9,223,372,836,854,775,808 부터 9,223,372,836,854,775,807 까지의 정수

[ 실수형 ]
- FLOAT: (4 Bytes) -3.4202823466E+38 부터 3.4202823466E+38 까지의 부동 소수. 표현 가능하다면 약 7자리까지의 정밀도를 가진다.
- DOUBLE: (8 Bytes) -1.797693134862515157E+388 부터 1.797693134862515157E+388 까지의 부동 소수. 표현 가능하다면 약 16자리의 정밀도를 가진다.
- DECIMAL(t, p): (t Bytes) 전체 길이가 t, 소수부 길이가 p 인 고정 소수. 차지하는 용량이 큰 대신, 값이 유실되지 않는다.
- FLOAT 과 DOUBLE 은 IEEE 754 표준을 따르는 이진 부동소수점 방식을 사용하는데,
  이는 이진수가 아닌 수를 이진수로, 혹은 이진수를 다른 수로 변환하는 과정 중에 수의 손실이 발생하거나 제한된 공간 속에서 표현할 수 없는 값이 있을 수도 있음으로 민감한 데이타를 저장하는데 사용하지 않는다.

[ 문자형 ]
- VARCHAR(n): (최대 4n Bytes, n 은 최대 65,535) 문자를 담기위해 사용한다. 최대 n 개의 문자를 담을 수 있다. (65,535 Bytes 를 초과하지 않는 범위 내에서)
- TINYTEXT(n): (최대 4n Bytes, n 은 최대 255) 문자를 담기위해 사용한다. 최대 n 개의 문자를 담을 수 있다. (255 Bytes 를 초과하지 않는 범위 내에서)
- TEXT(n): (최대 4n Bytes, n 은 최대 65,535) 문자를 담기위해 사용한다. 최대 n 개의 문자를 담을 수 있다. (65,535 Bytes 를 초과하지 않는 범위 내에서)
- MEDIUMTEXT(n): (최대 4n Bytes, n 은 최대 16,777,215) 문자를 담기위해 사용한다. 최대 n 개의 문자를 담을 수 있다. (16,777,215 Bytes 를 초과하지 않는 범위 내에서)
- LONGTEXT(n): (최대 4n Bytes, n 은 최대 4,294,967,295) 문자를 담기위해 사용한다. 최대 n 개의 문자를 담을 수 있다. (4,294,967,295 Bytes[약 4기가바이트] 를 초과하지 않는 범위 내에서)

[ 논리형 ]
- BOOLEAN: (1 Byte) 참(TRUE)와 거짓(FALSE)을 가질 수 있다. 실제 타입은 TINYINT UNSIGNED(1) 이다.

[ 날짜 및 시간 ]
- DATE: 날짜(년,월,일)을 가질 수 있따.
- TIME(n): 시간(시,분,초)을 가질 수 있다. n은 마이크로초의 길이를 의미하며, 생략시 0이고, 최대값은 6이다.
- DATETIME(n): 날짜 및 시간을 가질 수 있다. n은 마이크로초의 길이를 의미하며, 생략시 0이고, 최대값은 6이다.

[ 기타 ]


## 레코드 ##
- 레코드(Record)는 테이블에 종속되는 실질적인 데이타를 의미한다.
- 레코드는 반드시 테이블이 가지고 있는 열의 구조와 제약 조건에 부합해야한다.

[ 삽입하기 ]
- 테이블에 레코드를 삽입하기 위해 아래 쿼리를 실행한다.
    INSERT INTO `스키마 이름`.`테이블 이름` ([열 이름, ...])
    VALUES ([값, ...]);
    + 위 쿼리에서 명시한 열의 순서와 값의 순서는 반드시 일치해야한다.
    + 단, 명시하는 열의 순서는 테이블이 가지고 있는 열의 순서와 반드시 일치할 필요는 없다.
    + 테이블이 가지고 있는 모든 열을 반드시 명시할 필요는 없으며, 명시하지 않은 열의 값에 대해서는 해당 열의 기본값 (DEFAULT) 을 사용한다.
    + 열 이름을 명시하지 않을 경우 테이블이 가지고 있는 모든 열을 순서대로 적은 것과 같은 의미이다.
- 하나의 쿼리로 여러개의 레코드를 한 번에 삽입하기 위해 아래 쿼리를 실행한다.
    INSERT INTO `스키마 이름`.`테이블 이름` ([열 이름, ...])
    VALUES ([값, ...]),
           ([값, ...]),
           ([값, ...]), ...);

[ 선택하기 ]
- 테이블이 가지고 있는 레코드를 조회하기 위해 아래 쿼리를 실행한다.
    SELECT [*|열 이름|리터럴, ...]
    FROM `스키마 이름`.`테이블 이름`
    [WHERE 조건]?;
    [ORDER BY [기준 열] [ASC|DESC]?];
    + *: 테이블이 가지고 있는 모든 열
    + WHERE: 주어진 조건에 부합하는 레코드만 선택한다.
    + ORDER BY: 선택 결과를 기준 열이 가지는 값에 따라 정렬한다.
      # ASC: 오름차순 정렬. 생략 시 기본 값.
      # DESC: 내림차순 정렬.

[ 수정하기 ]
- 레코드가 가지고 있는 값을 수정하기 위해 아래 쿼리를 실행한다.
    UPDATE `스키마 이름`.`테이블 이름`
    SET [열 이름] = [값], ...;
    + 위 쿼리는 조건 없이 모든 레코드의 값을 수정하는 쿼리임으로 일반적으로 사용하지 않는다.
    + 주로 아래와 같이 WHERE 키워드를 사용하여 수정하고자 하는 레코드를 특정한다.
    UPDATE `스키마 이름`.`테이블 이름`
    SET [열 이름] = [값], ...
    WHERE [조건];

[ 삭제하기 ]
- 레코드를 삭제하기 위해 아래 쿼리를 실행한다.
    DELETE FROM `스키마 이름`.`테이블 이름`;
    + 위 쿼리는 조건 없이 모든 레코드를 삭제하는 쿼리임으로 일반적으로 사용하지 않는다.
    + 주로 아래와 같이 WHERE 키워드를 사용하여 삭제하고자 하는 레코드를 특정(제한)한다.
    DELETE
    FROM `스키마 이름`.`테이블 이름`
    WHERE [조건];
