# 폰트: https://github.com/orioncactus/pretendard
# 아이콘: https://icons8.com/icons/set/apps

*2025-02-13
[ HTML 문서 ]
- HTML문서 파일의 기본 확장자는 기본적으로 *.html을 사용한다.
- HTML문서를 작성하기 위해 아래와 같은 기본 구조를 완성한다.

<!DOCTYPE html>
<html lang ="ko">
<head>
	<meta charset="UTF-8">
	<title> </title>
</head>
<body>
</body>
</html>

* <!DOCTYPE html> : 해당 HTML 문서가 HTML 최신버전의 표준을 따르고 있다는 의미이다.
* <html lang ="ko"> .... </html> : 해당 HTML문서의모든 내용을 포함한다. 해당 태그의 외부에는 DOCTYPE을 제외하고 아무런 내용도 있어서는 안된다.
  + lang 속성: 해당 HTML문서가 인간의 어떤 언어로 작성되어 있는가에 대한 설명이다.
     속성값이 ko인 경우 한국어로 작성된 페이지라는 의미이다.
  + <head> .... </head> : 화면에 실질적으로 표시되지 않는 외부 리소스나 메타 정보, 문서의 제목 등을 포함한다.
	+ <meta charset="UTF-8"> : HTML문서의 인코딩 방식을 UTP-8로 설정한다.
	+ <title> ... </title> : 문서의 제목을 설정한다. 브라우저의 탭이나 제목에 표시될 텍스트이다.
  + <body> ... </body> : 화면에 실질적으로 표시되는 내용을 포함한다.


태그 및 속성
[ 태그 ]
- 태그(Tag)란 HTML문서가 가지는 구성 요소를 표현하기 위한 단위이다.
- 태그는 구획과 레이아웃을 위해 부모, 자식, 선조 ,자손, 형제 등의 관계로 작성한다.

[ 작성 방법 ] 
- 여는 태그(Opening Tag)는 여는 꺽쇠 괄호(<)로 시작하여, 태그의 이름을 작성하고, 닫는 꺽쇠 괄호(>)를 적는 것이다.
  + 가령, div 태그는 여는 태그는 <div> 와 같이 적는다.
- 닫는 태그(Closing Tag)는 여는 꺽쇠 괄호(<)로 시작하여, 슬래쉬</>를 적고, 태그의 이름을 적은 다음, 닫는 꺽쇠괄호(>)를 적는 거싱다.
  + 가령 div 태그는 닫는 는 태그는 </div> 와 같이 적는다.
- 아래와 같이 여는 태그와 닫는 태그 사이에 태그 내용을 작성하고, 여는 태그와 닫는 태그는 간섭 없이 반드시 쌍으로 이루어져 있어야 한다.
- 태그 중에 자동으로(스스로) 닫는 태그(Self-Closing Tag)가 있는데, 이러한 태그들은 닫는 태그를 작성하지 않는다. (meta, img, input 등이 그러하다.)

[ 관계 ]
- 태그 사이에는 선조(조상), 부모, 자식, 손자(자손), 형제, 인접 형제 등의 관계를 정의할 수 있다.
- 정의
  + 선조(조상): 기준 태그의 한 단계 이상 상위 태그(들)을 의미한다.
  + 부모: 기준 태그의 한 단계 상위 태그를 의미한다.
  + 자식: 기준 태그의 한 단계 하위 태그를 의미한다.
  + 손자(자손): 기준 태그의 한 단계 이상 하위 태그(들)을 의미한다.
  + 형제: 기준 태그와 동일한 부모를 가지고 보다 후행하는 태그(들)을 의미한다.
  + 인접형제: 기준 태그와 동일한 부모를 가지고, 바로 뒤에 후행하는 태그를 의미한다.
- 가령 태그간의 관계는 아래와 같이 정의할 수 있다.
<a>
  <b>
    <c></c>
    <d></d>
    <e></e>
  </b>
  <f>
    <g></g>
  </f>
</a>
    기준 태그    선조(조상)    부모    자식        손자(자손)    형제
         a		없음	없음    b, f	b,c,d,e,f,g   없음
         b		a	a        c,d,e	c,d,e	   f
         c		a, b	b        없음	없음	   d,e
         d		a, b	b        없음	없음	   e
         e		a, b	b        없음	없음	   없음
         f		a	a         g	g	   없음
         g		a, f	f         없음	없음	   없음

[ 속성 ]
- HTML 태그는 속성(Attribute)을 가질 수 있다.
- 속성은 여는 태그에 속성 이름, 등호(=), 쌍따옴표(")를 활용하여 <태그 속성="값">의 형식으로 작성 할 수 있다. 
  HTML 언어에서는 속성 값으로 문자열외의 값을 가질 수 없음에 유의한다.
  가령, <a num=17> 이라고 작성하여도 num 속성 값은 문자열 "17"로 자동 치환된다.
- 속성은 여는 태그에만 부여할 수 있고, 여러개의 속성을 부여할 수 있지만, 동일한 이름을 가지는 속성을 부여할 수는 없다.

     ↓속성                                  ↓속성
<a href="https://www.google.com" target="_self">구글</a>
 ↑태그      ↑속성 값                              ↑속성 값
- 위 코드에서 a 태그는 두개의 속성 href 와 target을 가진다.
- 위 코드에서 a 태그는 href 속성값으로 https://www.google.com 을 가진다.
- 위 코드에서 a 태그는 target 속성 값으로 _self를 가진다.

- 값을 가지지 않고, 단순히 정의되는 것 만으로도 그 의미를 가지는 속성도 일부 존재한다.

<input autofocus disabled readonly type = "text">
-위 코드에서 input 태그는 네 개의 속성 autofocus, disabled, readonly, type 속성을 가진다.
-위 코드에서 autofocus, disabled, readonly 세 개의 속성은 값을 가지지 않는다.
-속성이 값을 가지지 않는다하여 의미가 없는 것은 아니며, 일부 속성은 단순히 정의 되어 있는 것만으로도 의미가 부여되는 경우가 있다.

[ 전역속성 ]
- class: 공백으로 구분된 클래스 목록이다. 클래스 선택자(Class Selector) 를 활용하여 CSS나 자바스크립트에서 해당 요소에 접근할 수 있다.
  + 여러개의 클래스를 할당하기 위해 공백으로 구분하여야 하며, 절대로 여러개의 class속성을 할당하지 않는다.
     가령 color-red 및 font-bold 라는 클래스를 할당하기 위해 아래와 같이 class 속성 값을 지정한다.
	<span class="color-red font-bold">
	#위와 같이 공백으로 구분하는 것이 올바른 방법이며 아리왜 같이 여러개의 class 속성을 적는 것은 틀린 방법이다.
	<span class="color-red" class="font_bold">

- data-*: 사용자 지정 데이타 속성으로, HTML 태그와 자바스크립트간에 임의의 데이타를 교환하기 위해 사용하는 속성이다.
           * 자리에 변수의 이름을 작성할 수 있다. HTML에서는 케밥 케이싱하고, 자바스크립트에서는 카멜 케이싱한다.
	....
	<li data-person-age="78" data-person-gender="M">김갑수</li>
	....
	#위와 같이 HTML에서 data-*의 명명법은 케밥 케이싱하여야 한다. (전체 소문자, 단 어간 구분은 하이픈(-)으로)

	const $li = document.body.querySelector('li');
	const age = $li.dataset['personAge']; 		// 78
	const gender = $li.dataset['personGender'];	// M
	#위와 같이 자바스크립트에서 HTML의 data-*의 값을 받아올때는 dataset 멤버의 접근하여 카멜 케이싱된 키로 가져올 수 있다.

- hidden: 해당 태그를 숨긴다. 속성 값을 가지지 않는다.
- id: 태그의 식별자를 지정한다. 해당 HTML문서에서 유일해야함으로 유의한다.
- title: 해당 태그에 대해 추가 정보를 제공하는 툴팁을 설정한다.

[ a ]
- a(Anchor) 태그는 현재 페이지에서 다른 페이지로 이동할 수 있는 링크를 만들기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
    + href : 이동할 주소 및 경로
    + target : 이동할 방식
       + _blank : 새로운 탭에서 이동
       + _self : 현재 탭에서 이동

[ img ]
- img (image)태그는 이미지를 삽입하기 위해 사용한다.
- 자동으로 닫는 태그: O
- 시멘틱: O
- 속성
    + alt : src 속성에 명시된 이미지를 표시할 수 없을 때 대신(Alternative)하여 표시할 텍스트이다.
            이미지에 대한 간단한 설명이 되기도하고, 시각 장애인의 접근성을 크게 향상시킨다.
    + src : 표시할 이미지의 주소, 경로 혹은 64진법 문자열 데이타이다.

[ 주석 ]
- 주석(Comment)은 문서 실행에 영향을 미치지 않는 간단한 메모를 남기기 위해 사용한다.
- HTML 문법에서 한 줄 주석은 별도로 존재하지 않고 여러줄 주석은 <!-- 으로 시작하여 -->로 끝낼 수 있다.

코드 실행에 
<!-- 한줄 주석 -->
영향을
<!--
  여러
  줄
  주석
-->
미치지 않는다.

[ b ]
- b(Bold) 태그는 텍스트를 굵게 만든다.
- 자동으로 닫는태그: X
- 시멘틱: X
- 구버전에서는 단순히 글씨를 굵게하기 위해 사용하였으나, 현대 프론트에서는 단순히 글씨를 굵게하기 위한 용도로 사용하지 않는 것을 권장한다.
  이를 위해서는 CSS의 font-weight 속성을 사용할 것을 권장하기 때문에 b 태그의 사용이 굉장히 애매한 상황.

[ strong ]
- strong 태그는 텍스트를 굵게 만든다.
- 자동으로 닫는태그: X
- 시멘틱: O
- 문서 내에서 유의미한 문장이나 단어를 포함하고자 할때 사용한다. 단, 제목이나 문단전체를 포함하여서는 안된다.
  검색엔진최적화(SEO)에 의미있다.

[ br ]
- br (Break) 태그는 개행을 위해 사용한다.
- 자동으로 닫는 태그: O
- 시멘틱: X
- 문단을 나누거나, 문서 레이아웃(디자인) 목적으로 사용하여서는 안 된다.

*2025-02-14
[ p ]
- p (paragraph) 태그는 문단을 포함하기 위해 사용하는 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O

[ h1 ~ h6 ]
- h1, h2, h3, h4, h5, h6 (Heading) 태그는 이를 포함하는 (컨테이너)태그의 제목이나 간략한 주제를 나타내기 위해 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 숫자가 작을 수록(1에 가까울 수록) 의미가 큰 태그이다.
-단, h1 태그는 문서의 제목이어야 하고, 문서에 단 하나만 존재해야 한다.

[ li ]
- li (List Item)태그는 목록 태그( ol 및 ul )의 항목 하나를 가지기 위한 태그이다.
-자동으로 닫는 태그 : X
-시멘틱: O
-부모로 ol 혹은 ul 태그를 가진다.

[ ol ]
- ol (Ordered List) 태그는 순서와 유관한 서로 관련된 항목을 가지기 위한 목록 태그이다.
-자동으로 닫는 태그 : X
-시멘틱: O
-자식으로 li 태그를 가진다.

[ ul ]
- ul (Unordered List) 태그는 순서와 무관한 서로 관련된 항목을 가지기 위한 목록 태그이다.
-자동으로 닫는 태그 : X
-시멘틱: O
-자식으로 li 태그를 가진다.

[ cite ]
-cite 태그는 출판물, 영화 등의 저작물의 출처나 제목 등을 나타내기 위해 사용한다.
-자동으로 닫는 태그:X
-시멘틱:O
-단순히 글씨를 기울이기 위해 사용하여서는 안된다. 이를 위해서는 CSS의 font-style 속성을 사용해여야 한다.

[ em ]
- em (Emphasize) 태그는 어떤 문장이나 문장의 부분을 강조하기 위해서 사용한다.
-자동으로 닫는 태그:X
-시멘틱:O
-단순히 글씨를 기울이기 위해 사용하여서는 안된다. 이를 위해서는 CSS의 font-style 속성을 사용해여야 한다.

[ i ]
- i (Italic) 태그는 본문의 주된언어와 다른 언어를 담기 위해 사용한다.
-자동으로 닫는 태그:X
-시멘틱:O
-단순히 글씨를 기울이기 위해 사용하여서는 안된다. 이를 위해서는 CSS의 font-style 속성을 사용해여야 한다.

[ u ]
- u (Underline) 태그는 오자를 강조하기 위해 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 단순히 밑줄을 긋기위해 사용하여서는 안된다.

[ sub ]
- sub (Subscript) 태그는 아래 첨자를 위해 사용하는 태그이다.
- 자동으로 닫는 태그:X
- 시멘틱: X

[ sup ]
- sup (Superscript) 태그는 위 첨자를 위해 사용하는 태그이다.
- 자동으로 닫는 태그:X
- 시멘틱: X

[ table ]
- table 태그는 표를 만들기위한 태그이다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 데이타를 담고 시각화하기 위한 목적으로만 사용하여야 하며, 사이트의 레이아웃이나 디자인 목적으로 사용하여서는 안된다.

[ thead ]
- thead (Table Thead) 태그는 테이블의 데이터에 대한 열(Column)을 가지기 위해 사용한다. 주로 상단에 위치하나, 반드시 그 위치가 상단일 필요는 없다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 실질적인 데이타를 담지 않는 것이 권고된다.
- table 태그의 자식이어야 하며 한 개 이하만 사용되어야한다.

[ tbody ]
- tbody (Table Body) 태그는 테이블의 실질적인 데이타를 담기위해 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- table 태그의 자식이어야 하며, 한개 이상 사용되어야 한다.

[ tfoot ]
- tfoot (Table Foot) 태그는 테이블이 가지고 있는 데이타의 통계나 정리를 목적으로 사용하는 경우가 많다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- table 태그의 자식이어야 하며 한 개 이하만 사용되어야한다.

[ tr ]
- tr (Table Row) 태그는 행 하나를 정의하기 위해 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 행의 존재를 정의할 뿐이며, 데이타를 직접 가질 수 없다.
- thead, tbody, tfoot 의 자식이어야 한다.

[ td ]
- td (Table Data Cell) 태그는 셀(열,칸)을 정의하는데 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 실제 데이타를 담는 목적으로 사용한다. 열이나 행을 대표하는 이름이나 설명을 담아서는 안된다.
- 속성
   + colspan: 차지할 열 방향(가로 방향)으로 칸의 개수를 지정한다.
	     개수에는 속성이 부여되는 칸도 포함된다. 즉, 길이 1이라면 확장하지 않는다.
   + rowsapn: 차지할 행 방향(세로 방향)으로의 칸의 개수를 지정한다.
	     개수에는 속성이 부여되는 칸도 포함된다. 즉, 값이 1이라면 확장하지 않는다.

[ th ]
- th (Table Heading Cell) 태그는 셀(칸,열)을 정의하는데 사용한다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 열이나 행을 대표하는 이름이나 설명을 담기 위해 사용하며, 실제 데이타를 담아서는 안된다.
- tr 의 자식이어야 한다.
- 속성
  + colspan: 차지할 열의 개수를 지정한다.
	    개수에는 속성이 부여되는 칸도 포함된다. 즉, 길이 1이라면 확장하지 않는다.
  + rowsapn: 차지할 행 방향(세로 방향)으로의 칸의 개수를 지정한다.
	     개수에는 속성이 부여되는 칸도 포함된다. 즉, 값이 1이라면 확장하지 않는다.
  + scope: 어느 방향의 데이타에 대한 대표 값인지에 대한 설정.
      + col: 열 대표(세로 방향)
      + row: 행 대표(가로 방향)

[ caption ]
- cation 태그는 테이블의 제목이나 설명을 지정하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- caption 태그는 table 태그의 가장 첫번째 자식이어야 한다.

[ colgroup ]
- colgroup (Column Group) 태그는 테이블이 가지는 서로 유관한 열의 그룹을 정의하기 위해 사용한다. 단일 열을 정의하기 위해 사용할 수도 있다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- table 태그의 자식이어야 한다.

[ col ]
- col (Column)태그는 colgroup 태그의 자식으로 테이블이 가지는 열을 정의하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + span: 몇 개의 열에 대한 정의인지 지정한다.

[ audio ]
- audio 태그는 오디오를 삽입하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + autoplay: 리소스가 로드되었을 때 자동으로 재생할 것인가에 대한 속성이다. 속성값을 가지지 않는다.
                 단, 브라우저 설정에 따라 muted 속성이 함께 부여되어있지 않을 경우 무시될 수도 있다.
  + controls: 볼륨 조절, 재생 및 일시정지, 시간 탐색 등을 할 수 있는 기능을 활성화 할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + loop: 반복 재생할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + muted: 초기 상태로 음소거할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + src: 리소스의 주소 및 경로. 단, 자식으로 한 개 이상의 source 태그를 가진다면 생략할 수 있다.

[ source ]
- source 태그는 audio 혹은 video 태그가 한 개 이상의 리소스 중 운영체제나 브라우저와 가장 호환성이 좋은 리소스를 택할 수 있는 선택지를 제공할 수 있게하기 위해 사용한다.
- 일반적으로 알고 있는 재생목록(플레이리스트)의 기능은 없음에 유의한다.
- 자동으로 닫는 태그: O
- 시멘틱: O
- 속성
  + src: 리소스의 주소 및 경로

[ video ]
- video 태그는 영상을 삽입하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + autoplay: 리소스가 로드되었을 때 자동으로 재생할 것인가에 대한 속성이다. 속성값을 가지지 않는다.
                 단, 브라우저 설정에 따라 muted 속성이 함께 부여되어있지 않을 경우 무시될 수도 있다.
  + controls: 볼륨 조절, 재생 및 일시정지, 장면 탐색 등을 할 수 있는 기능을 활성화 할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + loop: 반복 재생할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + muted: 초기 상태로 음소거할 것인가에 대한 속성이다. 속성 값을 가지지 않는다.
  + src: 리소스의 주소 및 경로. 단, 자식으로 한 개 이상의 source 태그를 가진다면 생략할 수 있다.

*2025-02-17
[ form ]
- form (양식)태그는 서버로 전송하고자 하는 사용자 입력 값을 받는 입력태그들(input, select, textarea 등)을 자식 혹은 자손으로 가지기 위한 태그이다.
- 자동으로 닫는 태그:X
- 시멘틱: O
- 하나의 양식 태그는 서로 유관한 입력 태그만 가지는 것이 좋다.
- 양식 태그는 서로 선조, 부모, 자식, 자손 관계를 형성하여서는 안된다.
- 속성
   + method: 요청을 전송할 방식을 지정한다.
      + get : GET 방식으로 지정
      + post : POST 방식으로 지정.
   + name: 양식 태그의 이름을 지정한다. (자바스크립트에서 document, forms 멤버의 키 값으로 접근 가능)
   + novalidate: 양식 태그의 제출(submit) 이벤트 발생 시 이가 가지는 입력 태그들이 요구하는 요구사항을 무시하게 한다. 속성 값을 가지지 않음.

[ input ]
- input 태그는 사용자로부터 입력값을 받기 위해 사용하는 태그이다.
- 자동으로 닫는 태그: O
- 시멘틱: O
- 속성
   + name: 가지고 있는 값을 서버로 전송할 때 사용할 식별자이다.
   + value: 해다 입력 태그의 (초기)값을 지정한다.
   + type: 해당 태그의 종류를 지정한다.
      + [text]: 별다른 특성이 없는 일반 텍스트.
      + button: 별 다른 특성이 없는 일반 버튼. 표시할 텍스트는 value 속성 값으로 설정한다.
      + [checkbox]: 여부 (참, 거짓) 값을 가지기 위해 사용한다.
      + color: 색상을 선택하기 위해 사용한다. 데이터 전송 시 HEX 컬러문자열로 전송한다.
      + date: 날짜를 선택하기 위해 사용한다.
      + datetime-local: 날짜와 시간을 선택하기 위해 사용한다.
      + [email]: 이메일을 입력 받기 위해 사용한다.
      + file: 파일을 입력 받기 위해 사용한다. 주로 첨부 파일 기능을 구현하기 위해 사용한다. 
              양식 태그를 통해 파일을 전송하려면 아래 요건을 모두 만족하여야 한다.
         + 양식 태그의 enctype 속성 값이 multipart/form-data 여야 한다.
         + 양식 태그의 method 속성 값이 post 여야한다.
      + hidden: 숨겨진 입력 태그를 위해 사용한다. 
                   주로, 서버로 전송은 되어야 하나 사용자가 직접 입력하는 값이 아닌(보안상의 이유로 대조되는 Salt 값 등) 것들을 포함하기 위해 사용한다.
      + number: 숫자값을 입력 받기 위해 사용한다.
      + [password]: 비밀번호를 입력받기 위해 사용한다.
      + radio: 여러 선택지 중 하나를 선택할 수 있게 하기 위해 사용한다. name 속성 값이 같은 raido 중 하나만 선택할 수 있다.
      + range: 범위 내의 숫자를 선택하기 위해 사용하는 바(bar)이다.
      + reset: 속해 있는 양식 태그가 가지고 있는 입력 태그들의 값을 초기화하는 버튼. 표시할 텍스트는 value 속성 값으로 설정한다.
      + search: 검색 키워드를 입력 받기 위해 사용한다.
      + submit: 속해 있는 양식 태그를 제출하기 위한 버튼.  표시할 텍스트는 value 속성 값으로 설정한다.
      + tel: 연락처를 입력받기 위해 사용한다.
      + time: 시간을 선택하기 위해 사용한다.
   + accept: type이 file 일때, 파일 선택 창에서 기본적으로 선택하게 할 파일의 형식을 지정한다. 
                별도로 지정하지 않으면 모든 파일을 선택할 수 있게 한다. 
                속성값 지정은 .확장자 (가령 .jpg, .png, .zip 등) 혹은 MIME 타입(가령 image/png, image/jpeg 등) 을 사용하고 
                MIME 타입의 서브타입은 와일드카드를 허용한다. 
                (image/*. video/* 등의 형식 사용가능) 또한 이러한 가용 형식을 콤마(,)로 구분하여 여러개 사용할 수 있다.
                가령 .jpg, .jpeg, .png, .webp, image/*
   + autofocus: 페이지가 로드되었을 때 해당 입력 태그에 자동으로 포커스를 줄 것이가에 대한 속성. 속성 값을 가지지 않는다.
   + checked: type 속성 값이 checkbox 혹은 radio 일때, 체크된 상태로 설정할 것인가에 대한 속성. 속성 값을 가지지 않는다.
   + disabled: 비활성화 할 것인가에 대한 속성. 속성 값을 가지지 않는다.
   + max: type 속성 값이 number, range 등 숫자와 관련이 있을 때 가질수 있는 최댓값.
   + min: type 속성 값이 number, range 등 숫자와 관련이 있을 때 가질수 있는 최솟값.
   + maxlength: 문자열의 최대길이 (값이 비어 있을 때 검사하지 않음)
   + minlength: 문자열의 최소길이 (값이 비어 있을 때 검사하지 않음)
   + multiple: type 속성 값이 file 일 때 파일을 여러개 선택할 수 있게 한다. 속성값을 가지지 않는다.
   + patten: 해당 필드가 가져야할 값에 대한 정규 표현식을 지정한다.
   + placeholder: 값이 비어있을 때 보여줄 텍스트를 지정한다.
   + readonly: 읽기 전용으로 지정하기 위해 사용한다. 속성값을 가지지 않는다.
   + required: 필수 필드이며 값이 비어있을 수 없음을 의미한다.
   + spellcheck: 브라우저에 내장되어있는 철자 확인 기능을 사용할 것인가에 대한 설정.
      + default: 기본 값으로, 브라우저의 설정에 따른다.
      + true: 강제사용
      + false: 강제 미사용
   + step: type 속성 값이 number 혹은 range 일떄 한 틱(Tick)에 변화할 단계 값.

[ button ]
- button 태그는 버튼을 만들기 위한 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + disabled: 비활성화 할 것인가에 대한 속성. 속성 값을 가지지 않는다.
  + name: 자바스크립트가 가지는 양식 태그 객체(HTMLFormElement)의 식별자로 사용하기위해 할당하는 편이다.
  + type: 해당 버튼 태그의 종류를 지정한다.
     + submit: 기본 값으로, 속해 있는 양식 태그를 제출한다.
     + button: 별 다른 특성이 없는 일반 버튼이다.
     + reset: 속해 있는 양식 태그가 가지고 있는 입력 태그들의 값을 초기화 한다.

[ select ]
- select 태그는 드롭다운(Drop Down)방식 혹은 리스트(List) 방식의 항목 선택을 위한 입력 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- select 태그는 직접 값을 가지지 않으며, 자식 혹은 자손으로 값을 가지는 option 태그를 가진다.
- 속성
  + name: 가지고 있는 값을 서버로 전송할 때 사용할 식별자이다.
  + autofocus: 페이지가 로드되었을 때 해당 입력 태그에 자동으로 포커스를 줄 것인가에 대한 속성. 속성 값을 가지지 않는다.
  + disabled: 비활성화 할 것인가에 대한 속성. 속성 값을 가지지 않는다.
  + multiple: 여러개의 option을 선택할 수 있게 한다. 드롭 다운 형식에서 리스트 형식으로 변하게 된다. 속성 값을 가지지 않는다.
  + required: 필수 필드이면 값이 비어있을 수 없음을 의미한다. 속성 값을 가지지 않는다.

[ optgroup ]
- optgroup (Option Group) 태그는 서로 유관한 option 태그들을 묶어내기 위해 사용한다.
- 자동으로 닫는 태그 :X
- 시멘틱: O
- 하나 이상의 option 태그가 서로 관련이 있음을 알리는 시멘틱이 있기는 하나, 선택이 불가한 항목이고, 시각적 외에 특별한 기능을 가지지는 않는다.
- select 태그의 자식이어야 하고, option 태그를 자식으로 가질 수 있다.
- 속성
  + label: 표시할 텍스트를 지정한다.
  + disabled: 해당 태그를 비활성화 한다. 단, 이가 가지고 있는 option 태그들도 함께 비활성화 된다. 속성 값을 가지지 않는다.

[ option ]
- option 태그는 select 태그가 가지는 실질적인 값이 있는 항목 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + disabled: 해당 태그를 비활성화한다. 속성 값을 가지지 않는다.
  + hidden: 해당 태그를 숨긴다. 속성값을 가지지 않는다.
  + selected: 해당 태그를 초기에 선택된 상태로 지정한다. 속성 값을 가지지 않는다.
  + value: 실질적으로 서버에 전송될 값을 지정한다. 생략할 경우 해당 태그가 가지는 내용으로 대체된다.

[ textarea ]
- textarea 태그는 개행이 가능한 문자열 값을 입력받기 위해 사용한다.
- 자동으로 닫는태그:X
- 시멘틱: O
 -초기값을 지정하기 위해서는 input 에서 value 속성 값을 지정했던 것과는 달리, 태그의 내부내용을 작성하면된다.
- 속성
  + name: 가지고 잇는 값을 서버로 전송할 떄 사용할 식별자이다.
  + autofocus: 페이지가 로드되었을 때 해당 입력 태그에 자동으로 포커스를 줄 것이가에 대한 속성. 속성 값을 가지지 않는다.
  + cols: 초기에 설정될 열의 개수(가로 방향으로의 글자 개수)를 지정한다. 자연수여야 하며 기본값은 20이다.
  + rows: 초기에 설정될 행의 개수(세로 방향으로의 줄 개수)를 지정한다. 자연수여야 하며 기본 값은 2이다.
  + disabled: 비활성화 할 것인가에 대한 속성. 속성 값을 가지지 않는다.
  + maxlength: 문자열의 최대길이 (값이 비어 있을 때 검사하지 않음)
  + minlength: 문자열의 최소길이 (값이 비어 있을 때 검사하지 않음)
  + placeholder: 값이 비어있을 때 보여줄 텍스트를 지정한다.
  + readonly: 읽기 전용으로 지정하기 위해 사용한다. 속성값을 가지지 않는다.
  + required: 필수 필드이며 값이 비어있을 수 없음을 의미한다.
  + spellcheck: 브라우저에 내장되어있는 철자 확인 기능을 사용할 것인가에 대한 설정.
     + default: 기본 값으로, 브라우저의 설정에 따른다.
     + true: 강제사용
     + false: 강제 미사용

[ label ]
- label 태그는 입력 태그와 관련하여 이에 관한 설명을 작성하고 연결시키기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- label 태그는 연결된 입력 태그에 대한 설명을 문자열로 가지며, 스크린 리더가 연결된 태그에 대한 설명으로 해당 내용을 사용한다.
- label 태그를 사용하는 방법은 아래와 같다.

  + label 태그가 직접 입력 태그를 자식 혹은 자손으로 가지게 하는 방법.
<label>
  <span>이메일</span>
  <input required maxlength="50" minlength="10" name="email" type="email">
</label>

  + label 태그의 for 속성 값을 입력 태그가 가지는 id 속성 값과 일치시키는 방법.
<label for="email">이메일</label>
<input required id="email" maxlength="50" minlength="10" name="email" type="email">
  #id 속성 값은 하나의 HTML문서 내에서 고유해야함으로 각별히 유의해야한다.


[ article ]
- article 태그는 HTML문서로부터 분리되어도 그 자체의 의미를 잃지 않고 제 기능을 할 수 있는 내용을 담기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 주로 게시글이나 댓글, 상품정보, 기사, 논문, 학술 자료 등을 담기 위해 사용한다.

[ aside ]
- aside 태그는 문서의 주된 내용은 아니지만 이와 간접적으로 관련이 있는 내용을 담기 위해 사용하는 플로우 컨텐츠이다.
- 자동으로 닫는 태그: X
- 시멘틱: O

[ div ]
- div 태그는 단순히 구획을 나누기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: X

[ footer ]
- footer 태그는 문서의 하단부 내용을 담기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 위치적으로 반드시 하단일 필요는 없으며 주로 저작권, 사업자 정보, 이용 약관, 사이트 맵 등을 담기 위해 사용한다.
- 필수 태그는 아니지만, 존재하는 것이 권장되고 하나의 HTML 문서 안에 여러개가 존재하여서는 안된다.

[ header ]
- header 태그는 문서의 상단부 내용을 담기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 위치적으로 반드시 상단일 필요는 없으며, 주로 사이트의 메인 메뉴, 검색 양식 등을 담기 위해 사용한다.
- 필수 태그는 아니지만, 존재하는 것이 권장되고 하나의 HTML 문서 안에 여러개가 존재하여서는 안된다.

[ main ]
- main 태그는 문서에서 주가되는 내용을 담기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 필수 태그는 아니지만, 존재하는 것이 권장되고 하나의 HTML 문서 안에 여러개가 존재하여서는 안된다.

[ nav ]
- nav (Navigation) 태그는 서로 관련있는 링크 혹은 기능 등 사용자가 상호작용 할 수 있는 요소들을 모아놓기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O

[ section ]
- section 태그는 HTML 문서로부터 분리되면 그 자체의 의미를 상실하고 제 기능을 할 수 없는 내용을 담기 위해 사용하는 플로우 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 주로 기능별, 내용별 구획을 구분하기 위해 사용한다.

[ span ]
- span 태그는 단순히 구획을 나누기 위해 사용하는 구문 컨텐츠 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: X

[ link ]
- link 태그는 (자바스크립트를 제외한) 외부 리소스를 불러오기 위해 사용하는 태그이다.
- 자동으로 닫는태그: O
- 시멘틱: O
- 속성
  + href: 외부 리소스의 주소 및 경로
  + rel: 외부 리소스의 유형
     # icon: 해당 리소스가 브라우저의 탭이나, 즐겨찾기, 모바일 단축 아이콘 등에 표시할 아이콘임을 설정.
     # stylesheet: 해당 리소스가 CSS임을 설정.
  + type: 외부 리소스의 MIME 타입을 설정 (생략하여도 무관함)

[ script ]
- script 태그는 외부 자바스크립트를 불러오거나 인라인 자바스크립트를 실행하기 위해 사용하는 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + src: 외부 자바스크립트의 주소 및 경로. 단, 인라인 스크립트가 있다면 작성하지 않음.
  + type: text/javascript 혹은 생략. 단, 인라인 스크립트가 있다면 작성하지 않음.
  + async: 페이지 로드를 블록하지 않고 스크립트 파일이 준비되는 즉시 실행한다.
  + defer: 페이지 로드를 블록하지 않고 스크립트 파일이 준비되고 DOM 구조가 파악되는 즉시 실행한다.

2025-02-18
[ CSS ]
- CSS (Cascading Style Sheets)는 HTML 요소에 스타일(크기, 색상 등)을 적용하기 위해 사용한다.

[ 적용 방법 ]
- CSS를 적용하는 방법은 몇가지가 있는데 다음과 같다.
  + 스타일 태그 활용
     + HTML문서에 있는 head 태그의 자식이 될 수있도록 style 태그를 만들어 해당 태그의 내부 내용에 CSS 문법을 작성하는 것을 의미한다.
     + HTML문서 내에서 HTML문법과 CSS 문법에 공존하게 됨으로 원하는 코드를 찾기 힘들어지고 유지보수가 까다로워진다.
  + 스타일 속성 활용
     + 스타일을 적용하고자 하는 태그에 style 속성을 부여하는 방법을 의미한다.
  + 링크 태그 활용
     + 아래와 같이 head 태그의 자식이 되도록 link 태그를 작성하여 HTML 파일 외부에서 작성된 CSS 파일을 불러와 사용할 수 있다.
	<head>
	  <link href="..." rel="stylesheet">
	</head>
	# href: 불러올 CSS 파일의 주소 및 경로
	# rel: stylesheet로 지정하여 불러올 파일이 CSS임을 지정한다.
     + HTML 문법이 작성된 HTML 파일과 CSS 문법이 작성된 CSS 파일을 완전히 분리하여 개발 및 유지보수에 용이하다.

[ 색상 값 ]
- CSS에서 색상을 표현하는 방법이 여러가지가 있는데 그중 일부는 다음과 같다.
  + 이름: white, black, red, blue 등과 같이 사전에 정의된 이름을 사용할 수 있다.
  + transparent: 투명.
  + rgb(r, g, b): 함수를 통해 각 인자에 대해 0 부터 255 까지의 적, 녹, 청의 값을 전달하여 색상을 반환받는 방식이다.
                    숫자가 작을 수록 어두우며 rgb(0, 0, 0)은 검은색, rgb(255, 255, 255)는 흰색이다.
  + rgba(r, g, b, a): 함수를 통해 색상을 반환받는 방식이다. 각 r, g, b, 인자는 위 rgb 함수와 동일하게 사용되나 , 알파값 ( a )으로 불투명도를 지정할 수 있다.
                         a 값은 0%(혹은 0.0) 부터 100%(혹은 1.0) 까지 지정할 수 있고, 0% 가까울 수록 투명해진다.
  + HEX: #rrggbb 혹은 #rrggbbaa 표현식을 통해 색상을 지정하여, 각 rr, gg, bb, 값은 RGB 함수에서 사용했던 인자의 10진법 값을 16진법 값으로 표현한 값이다.
           aa 값 또한 마찬가지로 RGBA 함수에서 사용했던 알파값의 255 에 대한 백분율을 10진법 값을 16진법 값으로 표현한 값이다.

[ 선택자 ]
- 선택자(Selector)는 하나 이상의 CSS 속성(Property)을 적용하기 위한 대상을 선택하기 위해 사용하는 표현식이다.
- CSS의 속성을 적용하기 위해 아래와 같이 작성한다.
	[선택자] {
	    [속성 이름 1]: [값 1];
	    [속성 이름 2]: [값 2];
	    [속성 이름 3]: [값 3];
	}
	#선택자를 작성하고 중괄호 ( { )를 열어 중괄호 닫기 ( } )전까지 속성을 여러개 작성할 수 있다.
	#속성은 속성 이름을 작성하고 콜론(:)을 적은 뒤 값을 적고 세미 콜론(;)으로 끝내야 한다. ( 속성 이름: 값; 끝 )

[ 기본 선택자 ]
- 전체선택자
  + 전체선택자(Universal Selector)는 모든 유형의 태그를 선택한다.
  + 별표 ( * ) 특수기호를 사용한다.
	* {
	}
	#모든 요소를 선택한다.
  + 유형 선택자가 아닌 선택자를 사용하는 경우 전체 선택자에게 생략된 것으로 간주한다.
	.color-red {
	}
	#위 선택자는 유형 선택자가 아님으로 실질적으로 아래와 같이 전체 선택자가 생략된 형태이다.
	*.color-red{
	}

  + 선택자를 복합하여 사용하되 유형 선택자가 없는 경우 전체선택자가 생략된 것으로 간주한다.
	[type="text"]:required {
	}
	#위 선택자의 특성 선택자와 의사 클래스를 복합하여 사용한 선택자인데 유형 선택자가 없음으로 실질적으로 아래와 같이 전체 선택자가 생략된 것으로 간주한다.
	*[type="text"]:required {
	}

- 유형선택자
   + 유형 선택자(요소 선택자, Type Selector)는 태그의 이름으로 선택한다.
   + 별도의 특수 기호 없이 태그의 이름을 작성한다.
   + 가령, 모든 span 태그를 선택하기 위해 아래와 같이 작성할 수 있다.
	span {
	}

- 클래스 선택자
  + 클래스 선택자 (Class Selector)는 태그가 가지고 있는 class 속성 값으로 선택한다.
  + 마침표 특수기호 ( . ) 를 이용하여 .클래스 의 형태로 작성한다.
  + 가령, color-red 라는 클래스를 가지는 모든 요소를 선택하기 위해 아래와 같이 선택자를 작성한다.
	.color-red {
	}

- 아이디 선택자
  + 아이디 선택자(ID Selector)는 태그가 가지고 있는 id 속성 값으로 선택한다.
  + 샾 특수기호 ( # )를 이용하여 #아이디 의 형태로 작성한다.
  + 가령, loginForm 이라는 id 가지는 요소를 선택하기 위해 아래와 같이 선택자를 작성한다.
	#loginForm {
	}

- 특성 선택자
  + 특성 선택자(속성 선택자, Attriute Selector)는 HTML 태그가 가지고 있는 속성 및 이의 값으로 선택한다.
  + 대괄호 특수기호 ( [ 및 ] )를 이용하여, 속성 및 값 관게 정의를 아래와 같이 할 수 있다.
     + [속성] : 속성 존재 확인
     + [속성=값] : 속성 값 일치 확인
     + [속성~=값] : 속성 값 포함 확인(구분자: 공백) + 즉, 단어별로 포함확인되나보다
     + [속성^=값] : 속성 값 시작 확인
     + [속성$=값] : 속성 값 끝 확인
     + [속성*=값] : 속성 값 포함 확인

- 그룹 선택자
  + 선택자 목록
     + 선택자 목록은 한번에 두 개 이상의 선택자를 선택하여 동일한 속성을 부여하기 위해 사용한다.
     + 콤마 ( , >로 선택자들을 구분한다.
     + 가령 h1, h2, h3, h4, h5, h6 여섯 개의 유형 선택자에 동일한 속성을 한번에 부여하기 위해 아래와 같이 선택자 목록을 작성할 수 있다.
	h1, h2, h3, h4, h5, h6 {
	}

[ 결합자 ]
  - 결합자에 의해 속성을 적용받는 대상은 항상 마지막 피결합자임에 유의한다.

- 자손결합자
  + 자손 결합자는 기준이 되는 선택자가 가지는 자식 혹은 자손이되는 선택자 전체를 선택하기위해 사용한다.
  + 선택자 사이를 공백으로 구분한다.
  + 가령, div의 자식 혹은 자손인 span 을 선택하기 위해 아래와 같이 작성한다.
	div span {
	}

- 자식 결합자
  + 자식 결합자는 기준이되는 선택자가 가지는 자식이 되는 선택자 전체를 선택하기 위해 사용한다.
  + 오른쪽 꺽쇠괄호 ( > ) 특수기호를 사용한다.
  + 가령, ul 태그의 자식인 li 태그를 모두 선택하기 위해 아래와 같이 선택자를 작성할 수 있다.
	ul > li {
	}

- 일반 형제 결합자
  + 일반 형제 결합자는 기준이되는 선택자와 동일한 부모를 가지고 이보다 후행하는 요소들에 대한 선택자이다.
  + 물결표 ( ~ ) 특수기호를 활용한다.
  + 가령, .container 태그의 자식인 .box의 일반형제인 .box를 선택하기 위해 아래와 같이 선택자를 작성할 수 있다.
	.container > .box ~ .box {
	}

- 인접 형제 결합자
  + 인접 형제 결합자는 기준이되는 선택자와 동일한 부모를 가지고 이에 바로 후행하는 요소에 대한 선택자 이다.
  + 더하기 ( + ) 특수기호를 활용한다.
  + 가령 .container 태그의 자식인 .box의 인접 형제인 .box를 선택하기 위해 아래와 같이 선택자를 작성할 수 있다.
	.container > .box + .box {
	}

[ 의사 클래스 ]
- 의사 클래스 (가상 클래스, Pseudo Class) 는 요소의 상태나 상황에 따라 선택자를 구분하기 위해 사용한다.
- 의사 클래스는 어떠한 선택자 뒤에 콜론 ( : ) 과 의사 클래스 이름을 붙여 사용한다.
- 의사 클래스의 종류는 다음과 같다.
  + :active : 활성(마우스를 누르고 있는)상태
  + :checked : input 태그의 type 속성 값이 checkbox 혹은 radio 일때 해당 태그가 체크되어 있는 상태.
  + :disabled : 태그가 비활성화되어 있는 ( disabled 속성이 있는) 상태. 단, 비활성화 가능한 태그만을 대상으로 한다.
  + :enabled : 태그가 활성화되어 있는 ( disabled 속성이 없는 ) 상태. 단, 비활성화 가능한 태그만을 대상으로 한다.
  + :focus : 태그가 포커스를 가지고 있는 상태. 단, 포커스를 가질 수 있는 태그만을 대상으로 한다.
  + :focus-within: 자기 스스로 혹은 자식/자손 중 하나가 포커스를 가지고 있는 상태. 단 포커스를 가질 수 있는 태그만을 대상으로 한다.
  + :has(x) : 태그가 선택자 x를 가지고 있는 상태.
  + :hover : 마우스 커서가 올라가 있는 상태
  + :not(:x) : 의사 클래스 x를 부정한 상태.
  + :optional : 태그가 필수 필드가 아닌 (required 속성이 없는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
  + :read-only : 태그가 읽기 전용(readonly 속성이 있는) 상태. 단 입력 가능한 태그만을 대상으로 한다.
  + :read-write : 태그가 읽기 전용이 아닌(readonly 속성이 없는) 상태. 단, 입력 가능한 태그만을 대상으로 한다.
  + :required : 태그가 필수 필드인 (required 속성이 있는) 상태. 단 입력 가능한 태그만을 대상으로 한다.
  + :scope : 선행하는 선택자(혹은 변수)에 의해 선택되는 요소를 참조하기 위한 가상의 지점. CSS가 아닌 자바스크립트에서 사용하기 위해 존재한다.
  + :first-child : 위치한 곳에서 첫번째 자식이면서 선행 선택자를 만족하는 상태.
  + :last-child : 위치한 곳에서 마지막 자식이면서 선행 선택자를 만족하는 상태.
  + :nth-child(x) : 위치한 곳에서 주어진 x를 만족하는 자식이면서 선행 선택자를 만족하는 상태.
     + 숫자 : 순번을 의미하며 1 부터 시작한다.
     + 식 ( n ) : 0 부터 1씩 증가하는 n 에 대하여 An+B 에 대한 식.
                   가령 3n 은 3의 배수이다. ( 0, 3, 6, 9, ... )
     + even : 짝수번째를 의미한다. ( 2, 4, 6, ... )
     + odd : 홀수번쨰를 의미한다. ( 1, 3, 5, ... )
  + first-of-type
  + last-of-type
  + nth-of-type(x)
     + 숫자 : 순번을 의미하며 1 부터 시작한다.
     + 식 ( n ) : 0 부터 1씩 증가하는 n 에 대하여 An+B 에 대한 식.
                   가령 3n 은 3의 배수이다. ( 0, 3, 6, 9, ... )
     + even : 짝수번째를 의미한다. ( 2, 4, 6, ... )
     + odd : 홀수번쨰를 의미한다. ( 1, 3, 5, ... )

[ 의사 요소 ]
- 의사 요소(Pseudo Element)는 요소의 앞이나 뒤에 가상의 요소를 만들거나, 내용에 간단한 변화를 주기위해 사용한다.
- 의사 요소는 어떠한 선택자 뒤에 콜론 두개( :: )와 의사 요소 이름을 붙여 사용한다.
- 의사 요소의 종류는 다음과 같다.
  + ::after : 선택한 요소의 맨 마지막 자식으로 의사 요소를 생성한다.
  + ::before : 선택한 요소의 첫번쨰 자식으로 의사 요소를 생성한다.
  + ::first-letter : 블록 컨테이너의 첫 글자에 대한 속성이다.
  + ::first-line : 블록 컨테이너의 첫 줄에 대한 속성을 지정한다.
  + ::selection : 선택한 텍스트에 대한 속성을 지정한다.

[ 우선 순위 ]
- CSS에서 작성하는 선택자는 우위 순위를 가리기 위해 아래 명시된 조건에 따라 점수를 매기고, 점수가 가장 높은 것이 가지는 속성이 선택을 받는다.
- 선택자간에 겹치는 속성이 있을 경우 우선순위가 높은 선택자의 속성이 적용된다. 겹치지 않는 속성은 우선 순위와 관계 없이 적용된다.
- 점수가 동일 할 경우 보다 아래쪽에 작성된 선택자가 우선순위를 가진다.
- 배점
  + !important 키워드를 활용한 우선순위 부여(점수: 10,000점, 무한대)
  + 인라인 속성을 통한 우선순위 부여(점수: 1,000점): 태그에 style 속성을 통해 스타일을 적용하여 우선순위를 높일 수 있다.
  + 아이디 선택자를 통한 우선순위 부여(점수: 100점)
  + 클래스 선택자를 통한 우선순위 부여(점수: 10점)
  + 의사 클래스를 통한 우선순위 부여(점수: 10점): 단, 부정( :not )은 제외
  + 유형 선택자를 통한 우선순위 부여(점수: 1점)
  + 전체 선택자( * ) (점수: 0점)
  + 부정 의사 클래스 ( :not ) (점수: 0점)

[ code ]
- code 태그는 컴퓨터 언어(한줄 내외)를 포함하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 해당 태그의 내용은 모노스페이스 ( monospace ) 스타일의 폰트가 적용되어 표시된다.

[ dl ]
- dl (Description-List)태그는 설명을 담기 위해 사용하는 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 자식으로 div 혹은 dt 및 dd 태그를 가질 수 있다. 단, ( div 와 dt ) 혹은 ( div 와 dd ) 가 동시에 사용되어서는 안 된다.

[ dt ]
- dt (Description_Term) 태그는 설명하고자 하는 대상을 담기 위해 사용하는 태그이다. 대상의 명칭을 담되, 대상에 대한 설명을 직접적으로 가져서는 안된다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 부모로 dl 혹은 div 를 가질 수 있다.
- 후행하는 dt 와 유관한 명칭일 수도 있고, 후행하는 dd 에 대한 명칭일 수도 있다.

[ dd ]
- dd (Description-Description) 태그는 선행하는 명칭에 대한 설명을 담기 위해 사용하는 태그이다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 부모로 dl 혹은 div 를 가질 수 있다.
- 선행하는 dt에 대한 설명일 수도 있고, 선행하는 dd 에 대한 부연 설명일 수도 있다.

[ dl, dt, dd 사용예 ]
#올바른 예
<dl>
  <dt>설명하고자 하는 것</dt>
  <dd>설명</dd>
</dl>

<dl>
  <dt>김치찌개</dt>
  <!-- 이 자리에 dd 이 온다면, 김치찌개에 대한 설명의 시작이다. -->
  <!-- 하지만 아래에 새로운 dt가 계속됨으로 설명이 아닌 설명하고자 하는 명칭의 지속인것. -->
  <dt><i>Gimchijjigae</i></dt>
  <dd>김치찌개는 대표적인 한국 요리 중 하나로, 김치를 넣고 얼큰하게 끓인 찌개이다.</dd>
  <!-- 이 자리에 dd 이 온다면, 김치찌개에 대한 부연 설명이다. -->
  <!-- 하지만 아래에 새로운 dt가 있음으로 김치찌개에 대한 맥락은 끝난것. -->
  <dt>된장찌개</dt>
  <dt><i>Doenjangjjigae</i></dt>
  <dd>된장지개는 끓는 육수에 된장을 풀고 육류나 어패류, 채소, 두부, 버섯 등을 비롯한 각종 재료를 넣어 끓인 찌개이다..</dd>
</dl>

#틀린 예1
<dt>라면</dt>
<dd>라면은 육수, 소금, 조미료, 고춧가루 등으로 만든 인스턴트식으로, 봉지라면과 컵라면 등이 있습니다.</dd>
+ dl 태그 없이 dt 및 dd를 사용할 수 없음.

#틀린 예2
<dl>
  <dd>짜장면 혹은 자장면은 볶은 춘장과 야채, 고기 등의 재료를 다시 식용유에 볶아 면에 비벼 먹는 음식이다.</dd>
</dl>
+ 선행하는 dt 없이 dd를 사용할 수 없음. (단, dd가 없는 dt는 허용 됨에 유의)

#틀린 예3
<dl>
  <div>
    <dt>에베레스트</dt>
    <dd>에베레스트산은 높이가 해발 8,848,86 m로 지구에서 가장 높은 산이다.</dd>
  </div>
    <dt>한라산</dt>
    <dd>한라산은 일반적으로 하와이의 순상화산과 유사하다고 여겨지지만, 실제로는 복합화산제에 해당한다.</dd>
</dl>
+ dl 의자식으로 div 와 dt (혹은 dd)를 복합하여 사용할 수 없음. (단순히 div를 사용할 수 없는게 아님에 유의)

[ iframe ]
- iframe 태그는 외부의 HTML 페이지를 표시하기 위해 사용한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 속성
  + src: 외부 HTML 페이지의 경로나 주소
- 사용예(HTML 문서 내 유튜브 영상 삽입)
	<iframe src="https://www.youtube.com/embed/g36qBZLvygQ"></iframe>
- CORS 정책(보안상의 이유로)에 의해 다른 도메인에서 사용하는 것을 막아놓는 경우가 많으니 사용에 유의할 것.

[ pre ]
- pre (Preformatted) 태그는 내용을 HTML에 의한 전처리 없이 출력하거나 긴 컴퓨터 언어를 포함하기 위해 사용한다. 공백이나 개행을 그대로 출력한다.
- 자동으로 닫는 태그: X
- 시멘틱: O
- 해당 태그의 내용은 모노스페이스 ( monospace ) 스타일의 폰트가 적용되어 표시된다.

*2025-02-19
[ color ]
- color 속성은 텍스트의 색상을 지정하기 위해 사용한다.
- 형태
  + [색상 값]

[ background-color ]
- background-color 속성은 배경 색상을 지정하기 위해 사용한다.
- 형태
  + [색상 값]

[ background-image ]
- background-image 속성은 배경 이미지를 지정하기 위해 사용한다.
- 형태
  + none: 가본 값으로, 배경이미지가 없음.
  + url(x): 배경 이미지로 사용할 리소스의 주소나 경로 문자열로 x를 사용한다.

[ background-position ]
- background-position 속성은 background-image 속성에 의해 지정된 배경 이미지의 위치를 지정하기 위해사용한다.
  + 기본값: top left
  + 형태의 [위치]
     + top
     + right
     + bottom
     + left
     + center
  + 형태
     + [위치]: 지정 되지 않은 나머지 방향에 대한 위치를 center로 지정한다.
                가령, top 이라고 작성할 경우 top center 가, left 라고 작성할 경우 left center 가, center 라고 작성할 경우 center center가 된다.
     + [위치: a] [위치: b]: 순서와 상관없이 값을 적용할 수 있다. 단 상충되는 값 (right left, top bottom)을 함께 적지 않는다.

[ background-repeat ]
- background-repeat 속성은 background-image 속성에 의해 지정된 배경 이미지의 반복과 관련된 설정을 하기 위한 속성이다.
  + 기본 값: repeat
  + 형태의 [값]
     + repeat : 반복함.
     + no-repeat : 반복하지 않음.
     + space : 양 끝에 위치 후 남는 사이 공간에 균등하게 반복한다.
  + 형태
     + [값]: 가로와 세로 방향 모두 적용한다.
     + [값: a] [값: b]: 값 a와 b에 대해 각각 가로방향, 세로방향에 적용한다.
     + repeat-x : 가로축으로 반복한다.
     + repeat-y : 세로축으로 반복한다.

[ background-size ]
- background-size 속성은 background_image 속성에 의해 지정된 배경이미지의 크기를 지정하기 위해 사용한다.
- 형태
  + auto: 이미지가 본래 가지는 해상도를 그대로 보여준다.
  + contain: 배경 이미지를 담고 있는 요소 내에서 배경 이미지를 자르거나 비율을 변경하지 않고 표현할 수 있는 가장 큰 크기로 지정한다.
  + cover: 배경 이미지를 담고 있는 요소의 빈 부분이 보이지 않을 수 있는 범위 내에서 비율을 변경하지 않고 표현할 수 있는 가장 작은 크기로 지정한다.
  + [크기 값]: 이미지의 가로 크기를 지정한다. 이때 세로 크기는 이미지의 비율을 훼손하지 않는 비율에 따라 자동으로 조정된다.
  + auto [크기 값]: 이미지의 세로 크기를 지정한다. 이때 가로 크기는 이미지의 비율을 훼손하지 않는 비율에 따라 자동으로 조정된다.
  + [크기 값: a] [크기 값: b]: 각 a와 b 를 이미지의 가로 크기와 세로 크기로 지정한다.

[ aspect-ratio ]
- aspect-ratio 속성은 요소의 크기에 대한 비율을 지정하기 위해 사용하는 속성이다.
- 크기와 관련된 속성이 모두( width, height 둘 다 ) 지정되어 있는 상황에서는 사용하지 않는다.
- 형태
  + auto: 기본 값으로, 비율에 따른 크기 조절을 하지 않는다.
  + [가로 비율 / 세로비율]

[ height ]
- height 속성은 요소의 세로 크기를 지정하기 위한 속성이다.
- display 속성 값이 inline 일떄는 무시됨에 유의한다.
- 형태
  + auto: 본래 가져야하는 높이를 가진다.
  + [크기 값]

[ max-height ]
- max-height 속성은 요소가 가질 수 있는 최대 높이를 지정하기 위한 속성이다.
- 요소가 가지는 내용이 해당 크기를 초과할 경우 오버플로우(Overflow)가 발생한다.
- 형태
  + none: 기본값으로, 최대 높이를 지정하지 않는다.
  + [크기 값]

[ min-height ]
- min-height 속성은 요소가 가져야하는 최소 높이를 지정하기 위한 속성이다.
- 형태
  + none: 기본값으로, 최소 높이를 지정하지 않는다.
  + [크기 값]

[ width ]
- width 속성은 요소의 너비를 지정하기 위한 속성이다.
- display 속성 값이 inline 일떄는 무시됨에 유의한다.
- 형태
  + auto: 본래 가져야하는 너비를 가진다.
  + [크기 값]

[ max-width ]
- max-width 속성은 요소가 가질 수 있는 최대 너비를 지정하기 위한 속성이다.
- 요소가 가지는 내용이 해당 크기를 초과할 경우 오버플로우(Overflow)가 발생한다.
- 형태
  + none: 기본값으로, 최대 너비를 지정하지 않는다.
  + [크기 값]

[ min-width ]
- min-width 속성은 요소가 가져야하는 최소 너비를 지정하기 위한 속성이다.
- 형태
  + none: 기본값으로, 최소 너비를 지정하지 않는다.
  + [크기 값]

[ px / rem ]
- px : rem = 16 : 1 -> 즉 16px 는 1rem과 같다.
  px는 고정값. rem은 가변값 (글씨가 리사이즈 되서 커지거나 작아질때 가변적 반영됨)

*2025-02-20
[ position ]
- position 속성은 요소의 위치함에 대한 기준을 지정하기 위한 속성이다.
- 형태
  + static: 기본 값으로, 포지셔닝을 하지 않음. top, right, bottom, left 속성을 무시한다.
  + relative: 상대적 포지셔닝. 본래 요소의 위치 ( static 일때의 위치 ) 를 기준으로 움직인다.
  + absolute: 절대적 포지셔닝. position 속성 값이 static 이 아닌 가장 가까운 부모(없다면 문서 자체)를 기준으로 움직인다.
	     추가로 다른 요소의 흐름에 영향을 미치지 않는다.
  + fixed: 고정 포지셔닝. 뷰포트를 기준으로 움직인다. 스크롤에 영향을 받지 않으며 항상 문서를 기준으로 움직이다. 
	추가로 다른 요소의 흐름에 영향을 미치지 않는다.

[ top ]
- top 속성은 요소의 상단 위치를 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ right ]
- right 속성은 요소의 우측 위치를 지정하기 위한 속성이다.
- 형태
  + [크기 값]


[ bottom ]
- bottom 속성은 요소의 하단 위치를 지정하기 위한 속성이다.
- 형태
  + [크기 값]


[ left ]
- left 속성은 요소의 좌측 위치를 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ display ]
- display 속성은 요소가 표시될 방식을 지정하기 위한 속성이다.
- 형태
  + block : 해당 요소를 플로우 컨텐츠로 표시한다.
  + inline : 해당 요소를 구문 컨텐츠로 표시한다. width, height, margin-top, margin-bottom 속성을 무시한다.
  + inline-block : inline 의 속성을 가지는 구문 컨텐츠이면서 크기 설정 등이 가능하도록 일부 block의 속성도 가지도록 표시한다.
  + none : 요소를 랜더링하지 않는다. 공간도 차지하지 않는다.
  + flex : 해당 요소를 플로우 컨텐츠형 플렉스 컨테이너로 표시한다.
  + inline-flex : 해당 요소를 구문 컨텐츠형 플렉스 컨테이너로 표시한다.
  + grid : 해당 요소를 플로우 컨텐츠형 그리드 컨테이널 표시한다.
  + inline-grid : 해당 요소를 구문 컨텐츠형 그리드 컨테이너로 표시한다.

[ margin ]
- margin 속성은 요소의 외부 여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값] : 모든 방향에 값을 적용한다.
  + [크기 값: v] [크기 값: h] : 위, 아래에 v 를, 좌, 우에 h를 적용한다.
  + [크기 값: t] [크기 값: r] [크기 값: b] [크기 값: l] : 상, 우, 하, 좌 순서대로 t, r, b, l 을 적용한다.
- 플로우 컨텐츠의 상하측 margin을 사용할 경우 인접한 요소간에 마진 상쇄(Margin Collapse)가 발생할 수 있음으로 유의한다.


[ margin-top ]
- margin-top 속성은 요소의 위쪽 외부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ margin-right ]
- margin-right 속성은 요소의 오른쪽 외부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ margin-bottom ]
- margin-bottom 속성은 요소의 아래쪽 외부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ margin-left ]
- margin-left 속성은 요소의 왼쪽 외부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ padding ]
- padding 속성은 요소의 내부 여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값] : 모든 방향에 값을 적용한다.
  + [크기 값: v] [크기 값: h] : 위, 아래에 v 를, 좌, 우에 h를 적용한다.
  + [크기 값: t] [크기 값: r] [크기 값: b] [크기 값: l] : 상, 우, 하, 좌 순서대로 t, r, b, l 을 적용한다.

[ padding-top ]
- padding-top 속성은 요소의 위쪽 내부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ padding-right ]
- padding-right 속성은 요소의 오른쪽 내부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ padding-bottom ]
- padding-bottom 속성은 요소의 아래쪽 내부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ padding-left ]
- padding-left 속성은 요소의 왼쪽 내부여백을 지정하기 위한 속성이다.
- 형태
  + [크기 값]

[ font-family ]
- font-family 속성은 서체를 지정하기 위한 속성이다.
- 해당 속성은 콤마 ( , )로 구분하여 여러개를 사용할 수 있다. 이 때 어떠한 텍스트에 대해 가장 먼저 언급된 서체부터 적용하려 하는데,
  해당 텍스트를 적용할 수 없는 서체인 경우 차순위 서체를 적용한다.
- 최종적으로 어떠한 텍스트를 표현할 서체가 없을 경우, 브라우저에 따라 다르나, 시스템 기본 폰트로 표현하거나, 네모 박스(ㅁ)로 표시한다.
- 형태
  + [폰트 이름, ...]?[serif|sans-serif|monospace|cursive|math]
     ex) font-family: '맑은 고딕', '바탕', '궁서', sans-serif;

[ font-size ]
- font-size 속성은 텍스트의 크기를 지정하기 위한속성이다.
- 형태
  + [크기 값]

[ font-style ]
- font-style 속성은 텍스트의 스타일을 지정하기 위한 속성이다.
- 형태
  + normal : 기본 값으로 별도의 스타일을 가지지 않는다.
  + italic : 필기체를 지원하는 경우 흘려쓰기 스타일을 적용한다. 그렇지 못한경우 oblique 와 동일하다.
  + oblique :단순히 기울기를 적용한다.

[ font-weight ]
- font-weight 속성은 텍스트의 굵기를 지정하기 위해 사용한다.
- 형태
  + [ 숫자 ] : 주로는 100이상의 100단위 숫자. 폰트마다 지원하는 단위가 다르다.
  + normal : 숫자 400과 같다.
  + bold : 숫자 700과 같다.
  + bolder : 부모 요소의 font_weight가 가진 속성 값보다 한 단계 굵은 값.
  + lighter  :  부모 요소의 font_weight가 가진 속성 값보다 한 단계 얇은 값.

[ box-shadow ]
- box-shadow 속성은 요소의 그림자를 적용하기 위한 속성이다.
- 형태
  + [오프셋 X] [오프셋 Y] [흐림 반경] [굵기 반경] [색상]
     + [오프셋 X] : 그림자를 가로 방향으로 얼마나 이동시킬지에 대한 크기 값이다.
     + [오프셋 Y] : 그림자를 세로 방향으로 얼마나 이동시킬지에 대한 크기 값이다.
     + [흐림 반경] : 굵기 반경에서 설정한 선을 얼마나 흐릴지에 대한 크기 값이다.
     + [굵기 반경] : 흐림 반경에서 흐리게할 그림자의 근원이 되는 선의 굵기를 지정하기 위한 크기 값이다.
     + [색상] : 그림자의 색상.

[ box-sizing ]
- box-sizing 속성은 요소의 크기를 정할때의 기준을 설정하기 위한 속성이다.
- 형태
  + content-box : 기본 값으로, 요소가 가질수 있는 내부 내용을 담는공간을 기준으로 크기를 지정한다.
  + border-box : 요소의 테두리를 기준으로 크기를 지정한다.

[ border ]
- border 속성은 요소의 테두리를 지정하기 위한 속성이다.
- 형태
  + none : 기본 값으로, 테두리가 없음.
  + [굵기 크기 값] [형태] [색상 값]
     + [형태] : 테두리 선의 형태이며 값은 아래 중 하나이다.
        + dashed : 일반 점선
        + dotted : 둥근 점선
        + double : 이중 실선
        + grooved : 파인 입체 실선
        + ridge : 돌출 입체 실선
        + solid : 실선

[ border-top ]
- border-top 속성은 요소의 위쪽 테두리를 지정하기 위한 속성이다.
- 기본 값 및 값의 형태는 border 와 같다.

[ border-right ]
- border-top 속성은 요소의 오른쪽 테두리를 지정하기 위한 속성이다.
- 기본 값 및 값의 형태는 border 와 같다.

[ border-bottom ]
- border-top 속성은 요소의 아래쪽 테두리를 지정하기 위한 속성이다.
- 기본 값 및 값의 형태는 border 와 같다.

[ border-left ]
- border-top 속성은 요소의 왼쪽 테두리를 지정하기 위한 속성이다.
- 기본 값 및 값의 형태는 border 와 같다.

[ border-radius ]
- border-radius 속성은 요소의 모서리를 둥글게 만들기 위한 속성이다.
- 형태
  + [크기 값]

[ border 기타 테두리와 관련된 속성 ]
- border-color : (전체) 테두리의 색상
- border-style : (전체) 테두리의 스타일
- border-width : (전체) 테두리의 굵기
- border-top-color : 위쪽 테두리의 색상
- border-top-style :  위쪽 테두리의 스타일
- border-top-width : 위쪽 테두리의 굵기
- border-right-color : 오른쪽 테두리의 색상
- border-right-style :  오른쪽 테두리의 스타일
- border-right-width : 오른쪽 테두리의 굵기
- border-bottom-color : 아래쪽 테두리의 색상
- border-bottom-style : 아래쪽 테두리의 스타일
- border-bottom-width : 아래쪽 테두리의 굵기
- border-left-color : 왼쪽 테두리의 색상
- border-left-style : 왼쪽 테두리의 스타일
- border-left-width : 왼쪽 테두리의 굵기

[ transform ]
- transform 속성은 회전, 크기, 위치, 기울기 등 모양이나 상태에 변화를 주기 위해 사용하는 속성이다.
- 속성 값은 함수로 이루어져있고 공백으로 구분하여 여러개 사용할 수 있다.
- 함수
  + rotateX(d) : 각도인 d 값 만큼 X축을 기준으로 회전한다.
  + rotateY(d) : 각도인 d 값 만큼 Y축을 기준으로 회전한다.
  + rotateZ(d) : 각도인 d 값 만큼 Z축을 기준으로 회전한다.
  + scale(r) : 비율은 r 만큼 확대/축소 한다. 100% (혹은 1.0) 인 기본 크기이고, 값이 작아질수록 축소되며, 커질수록 확대된다.
  + translate(a, b) : 크기 혹은 비율 값인 a 만큼 X축으로, b 만큼 Y 축으로 이동한다. 
                        이때 a 값이 비율이라면 해당 요소의 가로 크기에, b 값이 비율이라며 해당 요소의 세로 크기에 비례하게 이동한다.
  + translateX(v) : 크기 혹은 비율 값인 v 만큼 X 축으로 이동한다. 이때 v 값이 비율이라면 해당 요소의 가로 크기에 비례하여 이동한다.
  + translateY(v) : 크기 혹은 비율 값인 v 만큼 Y축으로 이동한다. 이때 v 값이 비율이라면 요소의 세로 크기에 비례하여 이동한다.

[ filter ]
- filter 속성은 흐림이나 색상 변형 등 그래픽 효과를 적용하기 위해 사용한다.
- 속성 값은 함수로 이루어져 있고 공백으로 구분하여 여러개 사용할 수 있다.
  + blur(x) : 크기 값인 x 만큼을 반경으로하여 요소를 흐린다.
  + brightness(x) : 비율 값인 x 만큼 명도를 지정한다. 100% (혹은 1.0)이 본래 명도이고, 0% (혹은 0.0) 으로 지정할 경우 완전히 어두워 진다.
  + contrast(x) : 비율 값인 x만큼 대비를 지정한다. 100% (혹은 1.0) 이 본래 대비이고, 0% (혹은 0.0) 으로 지정할 경우 완전히 회색이 된다.
  + grayscale(x) : 비율 값인 x만큼 흑백으로 지정한다.
                      x 의 범위는 0% (혹은 0.0) 부터 100% (혹은 1.0) 까지이고, 0%가 본래 이미지이며, 100% 가 완전한 흑백 이미지이다.
  + hue-rotate(x) : 각도인 x 만큼 색조를 회전한다. x 의 범위를 0deg 부터 360deg 까지 이고, 360deg를 초과할 경우 0deg 부터 다시 순환한다.
  + invert(x) : 비율 값인 x 만큼 색상을 반전한다. 
                  x 의 범위는 0% (혹은 0.0) 부터 100% (1.0) 까지이고, 0%가 본래 이미지며, 100%가 되면 완전히 반전된 이미지가 된다.
  + saturate(x) : 비율 값인 x 만큼 채도를 지정한다. 100%가 본래 채도이며 0%로 지정할 경우 채도가 없는 이미지가 된다.


*2025-02-21
[ transition-delay ]
- transition-delay 속성은 트랜지션 발생 시작까지 지연시킬 시간을 지정한다.
- 형태
  + [시간 값]

[ transition-duration ]
- transition-duration 속성은 해당 요소에 특정 상황에 따라 변화하는 속성에 대해 해당 속성이변화하는데 걸리는 시간을 지정하기 위한 속성이다.
- 형태 
  + [시간 값]

[ transition-property ]
- transition-property 속성은 트랜지션의 적용을 받을 CSS 속성을 지정하기 위한 속성이다.
- 해당 속성에 명시되지 않은 CSS 속성은 트랜지션의 효과를 적용받지 않는다.
- 형태
  + all : 기본 값으로, 모든 적용 가능한 속성에 트랜지션을 적용한다.
  + none : 트랜지션을 적용하지 않는다.
  + [속성 이름, ...]

[ transition-timing-function ]
- transition-timing-function 속성은 트랜지션이 적용되는데 있어, 시간의 흐름에 따른 변화 완료율을 계산하는 함수를 지정하기위한 속성이다.
- 형태
  + ease : 기본 값.
  + eaes-in  
  + eaes-in-out
  + eaes-out 
  + linear 
  + [cubic-bezier 함수] 

[ letter-spacing ]
- letter-spacing 속성은 자간 거리를 지정하기 위한 속성이다.
- 형태
  + normal : 폰트, 운영체제 및 브라우저에서 지정하는 기본 값.
  + [크기 값] 

[ line-height ]
- line-height 속성은 한 줄의 높이를 지정하기 위한 속성이다.
- 형태
  + normal : 기본 값으로, 폰트 및 브라우저에서 지정하는 기본 값. (주로 110% ~ 140%)
  + [크기 값]

[ overflow ]
- overflow 속성은 속성이 적용되는 요소를 벗어나는 내용에 대한 설정을 위한 속성이다.
- 값
  + visible : 기본 값으로, 별도의 조치 없이 보이게 한다.
  + hidden : 벗어나느 내용을 보이지 않게한다.
  + auto : 필요한 경우 스크롤 바를 적용한다.
  + scroll : 항상 스크롤 바를 적용한다.
- 형태
  + [값] : 가로축과 세로축 모두 값을 적용한다.
  + [값: a] [값: b] : 가로축에 a 를, 세로축에 b 를 적용한다.

[ text-align ]
- text-align 속성은 텍스트를 정렬하기 위한 속성이다.
- 형태
  + left : 왼쪽 정렬
  + right : 오른쪽 정렬
  + center : 가운데 정렬.
  + justify :  양쪽 정렬 (마지막 줄은 무시)

[ text-decoration ]
- text-decoration 속성은 텍스트 장식을 위한 속성이다.
- 형태
  + none : 기본 값으로, 장식 없음.
  + [선 종류 ...] [색상 값]? [스타일]? 
     + [선 종류] : 선 종류는 공백으로 구분하여 여러개 사용할 수 있고 그 종류는 아래와 같다.
        # underline : 밑줄
        # overline : 윗줄
        # line-through : 취소선
     + [색상 값]? : 선의 색상을 지정하며, 생략 가능하고 생략시 텍스트의 색상(color)과 동일하게 지정된다.
     + [스타일]? : 선의 스타일을 지정하며, 생략 가능하고 생략 시 실선(solid)으로 지정된다.
        # solid : 실선
        # dashed : 일반 점선
        # dotted : 원형 점선
        # double : 이중 실선
        # wavy : 물결표

[ white-space ]
- white-space 속성은 텍스트의 공백 문자 및 개행자(엔터)에 대한 처리를 설정하기 위해 사용하는 속성이다.
- 형태
  + normal
     + 연속된 공백을 하나로 합친다.
     + 임의적인 개행을 인정하지 않는다. (공백으로 치환)
     + 줄이 길어져 요소를 벗어날 경우 자동으로 줄바꿈한다.
  + nowrap
     + 연속된 공백을 하나로 합친다.
     + 임의적인 개행을 인정하지 않는다. (공백으로 치환)
     + 줄이 길어져 요소를 벗어나도 자동으로 줄바꿈하지 않는다.
  + pre
     + 연속된 공백을 합치지 않는다.
     + 임의적인 개행을 인정한다.
     + 줄이 길어져 요소를 벗어나도 자동으로 줄바꿈하지 않는다.
  + pre-wrap
     + 연속된 공백을 합치지 않는다.
     + 임의적인 개행을 인정한다.
     + 줄이 길어져 요소를 벗어날 경우 자동으로 줄바꿈한다.

[ word-spacing ]
- word-spacing 속성은 단어간, 태그간 거리를 지정하기 위해 사용하는 속성이다.
- 형태
  + normal : 기본 값으로, 폰트 및 브라우저에서 지정하는 기본 값.
  + [크기 값]

[ cursor ]
- cursor 속성은 마우스 포인터 모양을 지정하기 위한 속성이다.
- 형태
  + auto : 기본 값으로, 브라우저가 상황에 맞게 알아서 판단한다.
  + none : 마우스 포인터 없음.
  + default : 노란 네모상자안에 빨간 화살표 마우스 모양이다;;;
  + pointer : 노란 네모상자안에 빨간 사람손가락에 검지만 세운 모양이다;;;
  + progress: 노란 네모상자안에 빨간 화살표 마우스 + 빨간 모래시계 그림이 붙은 모양이다;;;
  + wait : 노란 네모상자안에 빨간 모래시계 그림 모양이다;;;
  + text : 노란 네모안에 텍스트상자 위에 마우스 얹이면 뜨는 빨간 그림이다.
  + not-allowed: 노란 네모상자안에 동그란빨간 원형에 사선으로 금지 표시이다.
  + zoom-in : 돋보기 + 모양
  + zoom-out : 돋보기 - 모양
  + url(x) 함수 : x 는 원하는 이미지의 주소나 경로.

[ pointer-events ]
- pointer-events 속성은 마우스 포인터와 요소간의 상호 작용에 관한 설정을 위한 속성이다.
- 형태
  + auto : 기본 값으로 상호작용 가능
  + none : 상호작용 불가능

[ user-select ]
- user-select 속성은 사용자의 텍스트 선택에 대한 설정을 위한 속성이다.
- 형태
  + auto : 기본 값으로, 브라우저가 상황에 따라 알아서 판단한다.
  + all : 요소의 내용이 한번에 선택된다.
  + none : 요소의 내용을 선택할 수 없음.
  + text : 요소의 내용을 일반적으로 선택할 수 있음.

[ z-index ]
- z-index 속성은 z 축으로의 배치 순서를 설정하기 위한 속성이다. 값이 클수록 사용자에게 가까이 배치된다. (화면 위로 올라온다)
- 단 position 속성 값이 static 인 요소는 해당 속성을 무시한다.
- 형태
  + auto : 기본 값으로, 맥락(Context)을 형성하지 않는다.
  + [정수] 

[ @keyframes ]
- @keyframes 는 CSS에서 애니메이션을 작성하기 위해 사용하는 쿼리로, from 부터 to 까지 혹은 0% 부터 100% 까지,
  애니메이션의 한 사이클에 대한 내용을 담는다.
- 작성 예시는 아래와 같다.
	@keyframes [애니메이션 이름] {
	      from {
	          ...
	      }
	      to {
	          ...
	      }
	}

[ animation-delay ]
- animation-delay 속성은 애니메이션의 최초 사이클이 시작되기 전 지연시킬 시간을 지정한다. 사이클 사이의 시간에는 여향을 미치지 않는다.
- 형태
  + [시간 값]

[ animation-duration ]
- animation-duration 속성은 한 사이클이 완성되는데 걸리는 시간을 지정하기 위한 속성이다.
- 형태
  + [시간 값]

[ animation-iteration-count ]
- animation-iteration-count 속성은 애니메이션의 반복 횟수를 지정하기 위해 사용한다.
- 형태
  + infinite : 무한히 반복한다.
  + [자연수]

[ animation-name ]
- animation-name 속성은 '@keyframes' 쿼리에서 작성한 애니메이션 이름 을 값으로 사용하여 선택자에 의해 선택된 요소에 애니메이션을 적용한다.
- 형태
  + none: 기본 값으로, 애니메이션 없음.
  + [애니메이션 이름]

[ animation-play-state ]
- animation-play-state 속성은 애니메이션 재생 상태를 지정하기 위해 사용한다.
- 형태
  + running : 기본 값으로, 재생.
  + paused : 일시정지

[ animation-timing-function ]
- animation-timing-function 속성은 애니메이션이 적용되는데 있어, 시간의 흐름에 따른 사이클 완료율을 계산하는 함수를 지정하기 위한 속성이다.
- 형태
  + ease : 기본 값.
  + eaes-in  
  + eaes-in-out
  + eaes-out 
  + linear 
  + [cubic-bezier 함수] 

*2024-02-24
## flex ##
- 플렉스 컨테이너는 이가 가지는 자식 요소들에 대한 배치를 보다 유연하고 쉽게하기 위해 사용된다.
- 플렉스 컨테이너가 될 요소의 display 속성 값을 flex 혹슨 inline-flex로 설정한다.

# 플렉스 컨테이너(부모) #
[ align-content ]
- align-content 속성은 플렉스 컨테이너의 flex-wrap 속성 값이 wrap 일때만 유효하고, 플렉스 아이템 전체에 대해 flex-direction 의 수직한 방향으로의 정렬을 위한 속성이다.
- 형태
  + flex-start : 흐름의 시작 방향에 맞추어 정렬.
  + flex-end : 흐름의 끝 방향에 맞추어 정렬.
  + center : 가운데 정렬.
  + space-between : 각 플렉스 아이템 사이에 균등한 공간을 배분하도록 정렬.
  + space-around : 각 플렉스 아이템 사이에 균등한 공간을 배분하고, 각 끝 외부에 각 플렉스 아이템 사이의 공간의 절반에 해당하는 공간을 배분하도록 정렬.
  + space-evenly : 각 플렉스 아이템 사이 및 각 끝 외부에 균등한 공간을 배분하도록 정렬.

[ align-items ]
- align-items 속성은 플렉스 컨테이너의 flex-direction 에 대해 수직한 방향으로의 정렬을 위한 속성이다.
- 형태
  + flex-start : 흐름의 시작 방향에 맞추어 정렬.
  + flex-end : 흐름의 끝 방향에 맞추어 정렬.
  + center : 가운데 정렬.
  + space-between : 각 플렉스 아이템 사이에 균등한 공간을 배분하도록 정렬.
  + space-around : 각 플렉스 아이템 사이에 균등한 공간을 배분하고, 각 끝 외부에 각 플렉스 아이템 사이의 공간의 절반에 해당하는 공간을 배분하도록 정렬.
  + space-evenly : 각 플렉스 아이템 사이 및 각 끝 외부에 균등한 공간을 배분하도록 정렬.
  + stretch : flex-direction 에 수직한 방향으로의 플렉스 컨테이너의 크기에 맞게 늘이거나 줄이도록 정렬.

[ flex-direction ]
- flex-direction 속성은 플렉스 컨테이너에 부여하는 속성으로, 이가 포함하고 있는 아이템들이 흐름 방향을 지정하기 위해 사용한다.
- 형태
  + column : 세로 방향.
  + column-reverse : 세로 역방향. 요소의 순서도 반전됨.
  + row : 가로 방향.
  + row-reverse : 가로 역방향. 요소의 순서도 반전됨.

[ flex-wrap ]
- flex-wrap 속성은 플렉스 컨테이너가 가지고 있는 아이템을 한줄에 표시할 것인가에 대한 설정이다.
- 형태
  + nowrap : 기본 값으로, 플렉스 아이템이 컨테이너를 벗어나더라도 한 줄에 표시한다.
  + wrap : 플렉스 아이템이 컨테이너를 벗어나느 경우 여러줄에 걸쳐 표시한다.

[ gap ]
- gap 속성은 플렉스 컨테이너가 포함하는 아이템간의 거리를 지정하기 위해 사용한다.
- 형태
  + [크기 값] : 행간, 열간 거리를 모두 지정한다.
  + [크기 값: v] [크기 값: h] : 행간 거리를 v 로, 열간 거리를 h 로 지정한다.

[ justify-content ]
- justify-content 속성은 플렉스 컨테이너의 flex-direction 에 대해 수평한 방향으로의 정렬을 위한 속성이다.
- 형태
  + flex-start : 흐름의 시작 방향에 맞추어 정렬.
  + flex-end : 흐름의 끝 방향에 맞추어 정렬.
  + center : 가운데 정렬.
  + space-between : 각 플렉스 아이템 사이에 균등한 공간을 배분하도록 정렬.
  + space-around : 각 플렉스 아이템 사이에 균등한 공간을 배분하고, 각 끝 외부에 각 플렉스 아이템 사이의 공간의 절반에 해당하는 공간을 배분하도록 정렬.
  + space-evenly : 각 플렉스 아이템 사이 및 각 끝 외부에 균등한 공간을 배분하도록 정렬.

# 플렉스 아이템(자식) #
[ align-self ]
- align-self 속성은 부모의 플렉스 컨테이너의 flex-direction 속성에 대해 스스로의 수직한 방향으로의 정렬을 설정하기 위한 속성이다.
- 형태
  + flex-start : 흐름의 시작 방향에 맞추어 정렬.
  + flex-end : 흐름의 끝 방향에 맞추어 정렬.
  + center : 가운데 정렬.
  + space-between : 각 플렉스 아이템 사이에 균등한 공간을 배분하도록 정렬.
  + space-around : 각 플렉스 아이템 사이에 균등한 공간을 배분하고, 각 끝 외부에 각 플렉스 아이템 사이의 공간의 절반에 해당하는 공간을 배분하도록 정렬.
  + space-evenly : 각 플렉스 아이템 사이 및 각 끝 외부에 균등한 공간을 배분하도록 정렬.
  + stretch : flex-direction 에 수직한 방향으로의 플렉스 컨테이너의 크기에 맞게 늘이거나 줄이도록 정렬.

[ flex-basis ]
- flex-basis 속성은 플렉스 아이템의 (기본)크기를 설정하기 위해 사용하는 속성이다.
  부모인 플렉스 컨테이너의 flex-direction 속성 값이 row 나 row-reverse 일때 이는 width 와 같고, column 이나 column-reverse 일때 이는 height 와 같다. 단, 우선 순위는 낮다.
- 형태
  + auto
  + [크기 값]

[ flex-grow ]
- flex-grow 속성은 플렉스 아이템이 플렉스 컨테이너 안에서 flex-direction 방향에 따라 남는 여유 공간을 차지하기 위해 늘어날 비율을 지정한다. 단, 값이 0 이면 늘어나지 않는다.
- 형태
  + [0|자연수] : 기본 값 0

[ flex-shrink ]
- flex-shrink 속성은 플렉스 아이템의 크기가 플렉스 컨테이너보다 클 때 플렉스 아이템의 크기를 줄이는 비율을 지정하기 위해 사용한다.
- 형태
  + [0|자연수] : 기본 값 1

## grid ##
- 그리드 컨테이너는 이가 가지는 자식 요소(그리드 아이템)들에 대해 반복되는 격자 배치를 보다 쉽게하기 위해 사용한다.
- 그리드 컨테이너가 될 요소의 display 속성 값을 grid 혹은 inline-grid 로 설정한다.

# 그리드 컨테이너(부모) #
[ grid-auto-flow ]
- grid-auto-flow 속성은 그리드 아이템을 배치함에 있어 행을 먼저 완성할지, 열을 먼저 완성할지에 대해 설정하기 위한 속성이다.
- 값
  + row : 기본 값으로, 행 먼저 채움.
  + column : 열 먼저 채움.
- 형태
  + [값]

[ grid-template-columns ]
- grid-template-columns 속성은그리드 컨테이너에 부여하는 속성으로, 그리드 열 구조를 설정하기 위한 속성이다. 값을 공백으로 구분하여 여러개 작성할 수 있다.
- 값
  + 크기 값
  + fr 값
- 형태
  + [값 ...]

[ grid-template-rows ]
- grid-template-rows 속성은 그리드 컨테이너에 부여하는 속성으로, 그리드 행 구조를 설정하기 위한 속성이다. 값을 공백으로 구분하여 여러개 작성할 수 있다.
- 값
  + 크기 값
  + fr 값
- 형태
  + [값 ...]

[ gap ]
- gap 속성은 그리드 컨테이너가 포함하는 아이템간의 거리를 지정하기 위해 사용한다.
- 형태
  + [크기 값] : 행간, 열간 거리를 모두 지정한다.
  + [크기 값: v] [크기 값: h] : 행간 거리를 v 로, 열간 거리를 h 로 지정한다.

# 그리드 아이템(자식) #
[ grid-column ]
- grid-column 속성은 해당 아이템이 차지해야하는 열의 번호의 범위를 지정하기 위해 사용한다.
- 형태
  + [시작 번호] / [끝 번호]

[ grid-row ]
- grid-row 속성은 해당 아이템이 차지해야하는 행의 번호의 범위를 지정하기 위해 사용한다.
- 형태
  + [시작 번호] / [끝 번호]

[ order ]
- order 속성은 해당 아이템의 태그 순번과 관계 없이, 시각적으로 배치되어야 하는 순서를 지정하기 위해 사용한다.
- 단, grid-column, grid-row 속성이 적용되어 있다면, order 속성은 무시된다.
- 속성 값이 같은 아이템끼리는 태그의 배치 순서에 따라 표시된다.
- 형태
  + [숫자] : 기본 값은 0.

*2025-02-25










